#!/usr/bin/env python

import errno
import glob
import grp
import os
import pwd
import shutil
import signal
import tempfile
from subprocess import Popen, call, check_output, CalledProcessError, PIPE

try:
    from mako.lookup import TemplateLookup
    from baker import command
    import baker

    from flask.ext.roots import get_app, get_config
    from flask.ext.roots.utils import makedirs

except ImportError as e:
    print 'Missing Python package:', e
    print 'Please install all requirements.'
    exit(1)


our_path = os.path.abspath(os.path.join(__file__, '..', '..'))
root_path = os.environ.get('FLASK_ROOT_PATH')
instance_path = os.environ.get('FLASK_INSTANCE_PATH')
if not root_path:
    print 'FLASK_ROOT_PATH missing; did you activate?'
    exit(1)
if not instance_path:
    print 'FLASK_INSTANCE_PATH missing; did you activate?'
    exit(1)


# Make sure the working directory is at the root of the app.
os.chdir(root_path)


etc_lookup = TemplateLookup(directories=[
    os.path.join(instance_path, 'etc'),
    os.path.join(root_path, 'etc'),
    os.path.join(our_path, 'etc'),
])


@command
def nginx():


    makedirs('var/etc/nginx')

    config = get_config()

    def render(name, **kwargs):
        out_path = os.path.join(instance_path, 'etc', 'nginx', name)
        print 'nginx:', out_path
        data = dict(config)
        data.update(kwargs)
        rendered = etc_lookup.get_template('nginx.conf.mako').render(**data)
        with open(out_path, 'wb') as fh:
            fh.write(rendered)

    domains = config.get('DOMAINS') or [config.get('DOMAIN', 'localhost')]
    for domain in domains:
        render('%s.conf' % domain.lower(), DOMAIN=domain)

    
def get_user():
    uid = os.getuid()
    user = os.environ.get('SUDO_USER') if not uid else None
    user = user if user else pwd.getpwuid(uid).pw_name
    return user, uid


def get_group():
    for name in 'www', 'www-data':
        group = grp.getgrnam(name)
        return group.gr_name, group.gr_gid
    raise RuntimeError('Could not determine server group.')


@command
def config(all=False, *args):

    if all:
        config = get_app().config
    else:
        config = get_config()

    if args:
        print config.get(args[0])
        return

    for k, v in sorted(config.iteritems()):
        if k.startswith('_') or k.upper() != k:
            continue
        print '%s: %r' % (k, v)
    


@command
def directories(verbose=False):
    for name in '''
        tmp
        etc
        log/nginx
        static
        sqlite
        etc/flask
        etc/nginx
        assets
    '''.strip().split():
        path = os.path.join(instance_path, name)
        if verbose:
            print path
        makedirs(path)
        call(['chmod', 'g+s', path])


@command
def permissions(verbose=False):
    if os.getuid():
        print 'permissions must be run as root'
        return
    user, _ = get_user()
    group, _ = get_group()
    all_ = glob.glob('*')
    call(['chown', '-R' + ('v' if verbose else ''), user] + all_)
    call(['chgrp', '-R' + ('v' if verbose else ''), group] + all_)
    call(['chmod', '-R' + ('v' if verbose else ''), 'ug=rwX,o='] + all_)


@command
def css(watch=False, create=False):

    if create:
        if os.path.exists('css/config.rb'):
            os.unlink('css/config.rb')
        call(['compass', 'create',
            '--prepare',
            '--sass-dir', '.',
            '--css-dir', '../var/static/css',
            'css'
        ])
        return

    if watch:
        cmd = ['compass', 'watch', '--output-style', 'nested']
    else:
        cmd = ['compass', 'compile', '--output-style', 'compressed']

    cmd.extend((
        '--force',
        'css',
    ))

    try:
        print ' '.join(cmd)
        call(cmd)
    except KeyboardInterrupt:
        pass


@command
def js(watch=False):
    
    if watch:
        js()
        print 'watching for changes...'
        os.execvp('watchmedo', ['watchmedo', 'shell-command',
            '--patterns', '*.js',
            '--command', 'date; manage js',
            '--recursive',
            'js',
        ])

    out_path = os.path.join(instance_path, 'static', 'js')
    makedirs(out_path)

    if not os.path.exists('js'):
        print 'No Javascript'
        return
    
    from jsmin import jsmin
    for name in os.listdir('js'):

        name, ext = os.path.splitext(name)
        if name.startswith('_') or ext != '.js':
            continue

        print 'js: js/%s.js -> %s/%s.js' % (name, out_path, name)

        combined = check_output(['sprockets',
            '--include', 'js',
            '--include', 'js/include',
            '--include', 'js/vendor',
            '--include', os.path.join(os.environ['VIRTUAL_ENV'], 'lib', 'bower'),
            os.path.join('js', name + '.js'),
        ])
        with open(os.path.join(out_path, name + '.js'), 'w') as fh:
            fh.write(combined)

        minified = jsmin(combined)
        with open(os.path.join(out_path, name + '.min.js'), 'w') as fh:
            fh.write(minified)


@command
def services():

    config = get_config()

    makedirs(os.path.join(instance_path, 'services', 'web'))
    makedirs(os.path.join(instance_path, 'services', 'web', 'log'))
    run_path = os.path.join(instance_path, 'services', 'web', 'run')
    log_path = os.path.join(instance_path, 'services', 'web', 'log', 'run')

    print 'service:', run_path
    with open(run_path, 'wb') as fh:
        fh.write(etc_lookup.get_template('runit/web.run.mako').render(
            service_name='web',
            **config
        ))
    call(['chmod', 'a+x', run_path])

    with open(log_path, 'wb') as fh:
        fh.write(etc_lookup.get_template('runit/log.run.mako').render(
            service_name='web',
            **config
        ))
    call(['chmod', 'a+x', log_path])


def get_procfile():
    for path in (
        os.path.join(instance_path, 'etc', 'Procfile'),
        os.path.join(root_path, 'Profile'),
        os.path.join(our_path, 'etc', 'Procfile'),
    ):
        if os.path.exists(path):
            return path
    raise RuntimeError('could not find Procfile')


@command
def upstart():

    procfile = get_procfile()
    try:
        shutil.rmtree('var/etc/init')
    except OSError as e:
        if e.errno != errno.ENOENT:
            raise

    config = get_config()
    env = {
        'APP_ENTRYPOINT': config['APP_ENTRYPOINT'],
        'FLASK_ROOT_PATH': os.environ['FLASK_ROOT_PATH'],
        'FLASK_INSTANCE_PATH': os.environ['FLASK_INSTANCE_PATH'],
        'VIRTUAL_ENV': os.environ['VIRTUAL_ENV'],
    }
    env_fh = tempfile.NamedTemporaryFile()
    for k, v in sorted(env.iteritems()):
        env_fh.write('%s="%s"\n' % (k, v))
    env_fh.flush()
    call([
        'honcho', 'export',
        '--log', 'var/log',
        '--env', env_fh.name,
        '--port', str(config['PORT']),
        '--app', config['DOMAIN'],
        '--procfile', procfile,
        'upstart', 'var/etc/init',
    ])


@command(default=True)
def build():
    directories()
    nginx()
    services()
    css()
    js()
    permissions()


@command
def reload(*names):
    kill(*names, signal='hup')
      

def iter_services(*names):
    for root in (root_path, instance_path):
        service_dir = os.path.join(root, 'services')
        if not os.path.exists(service_dir):
            continue

        if names:
            for name in names:
                path = os.path.join(service_dir, name)
                if os.path.exists(path):
                    yield path
        else:
            for name in os.listdir(service_dir):
                yield os.path.join(service_dir, name)


@command
def kill(*names, **kwargs):

    sig_name = kwargs.pop('signal', 'kill')
    sig_id = getattr(signal, 'SIG' + sig_name.upper())

    for service in iter_services(*names):
        try:
            pid = int(open(os.path.join(service, 'pid')).read().strip())
        except IOError:
            print 'missing pid:', service
            continue
        except ValueError:
            print 'bad pid:', service
            continue
        try:
            os.kill(pid, sig_id)
        except OSError:
            print pid, 'not running:', service
        else:
            print pid, 'sent', sig_name + ':', service


@command
def serve(service=False, debug=None, watch=True, testing=None):

    # HACK!
    if testing is not None:
        os.environ['FLASK_TESTING'] = '1' if test else ''
    if debug is not None:
        os.environ['FLASK_DEBUG'] = '1' if debug else ''

    if not service:

        app = get_app()
        app.run(
            use_reloader=watch,
            port=app.config.get('PORT', 8000),
        )

    else:
    
        procs = []
        service_dir = os.path.join(instance_path, 'services')
        for name in os.listdir(service_dir):
            proc = Popen([os.path.join(service_dir, name, 'run')])
            procs.append(proc)
        try:
            for proc in procs:
                proc.wait()
        except KeyboardInterrupt:
            for proc in procs:
                proc.kill()
    


if __name__ == '__main__':
    baker.run()
